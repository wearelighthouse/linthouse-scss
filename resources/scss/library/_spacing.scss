/*

  PAD() and PUSH()

  This is our big sexy plan to help you standardise spacing.

  We use the keyword 'pad' to mean padding, and 'push' to mean margins. (Margin just doesn't shorten well, and it's not a verb.)

  The values you give to pad() and push() work the same as padding: and margin: shorthand.

  For example:

    pad(x)                  padding-top: x; padding-right: x; padding-bottom: x; padding-left: x;
    pad(x, y)               padding-top: x; padding-right: y; padding-bottom: x; padding-left: y;
    pad(x, y, z)            padding-top: x; padding-right: y, padding-bottom: z; padding-left: y;

  When you only want to specify one side, you can ignore the other values with a `0`.
  A `0` does not set padding-x: 0; It just ignores that side and moves on.

  For example:

  pad(0, foo, bar, 0)       padding-right: foo; padding-bottom: bar;


  PAD-X(O)

  You can also use the pad-top/right/bottom/left mixins to target a single side:

    pad-left(X)             padding-left: X;

  
  At the end of the file, we set up some simple helpers to use in your markup that just produces (1 * value).

  .pad--sides {
  }

  .push--verticals {
  }
  
*/

$values: (
  'padding': 1rem,
  'margin': 1rem
);

$sides: top, right, bottom, left;

@mixin layout($property, $a: false, $b: false, $c: false, $d: false) {
  $value: map-get($values, $property);

  @if ($a) {
    @if $a == 'verticals' or $a == 'sides' {

      @if ($a == 'verticals') {
        #{$property}-top: $value;
        #{$property}-bottom: $value;
      }
      @else if ($a == 'sides') {
        #{$property}-right: $value;
        #{$property}-left: $value;
      }
      @else if ($a == 'top') {
        #{$property}-top: $value;
      }
      @else if ($a == 'right') {
        #{$property}-right: $value;
      }
      @else if ($a == 'bottom') {
        #{$property}-bottom: $value;
      }
      @else if ($a == 'left') {
        #{$property}-left: $value;
      }
    }

    @else {
      @if $d {
        @if $a > 0 { #{$property}-top: $a * $value; }
        @if $b > 0 { #{$property}-right: $b * $value; }
        @if $c > 0 { #{$property}-bottom: $c * $value; }
        @if $d > 0 { #{$property}-left: $d * $value; }
      }
      @else if $c {
        @if $a > 0 { #{$property}-top: $a * $value; }
        @if $b > 0 { #{$property}-right: $b * $value; #{$property}-left: $b * $value; }
        @if $c > 0 { #{$property}-bottom: $c * $value; }
      }
      @else if $b {
        @if $a > 0 { #{$property}-top: $a * $value; #{$property}-bottom: $a * $value; }
        @if $b > 0 { #{$property}-left: $b * $value; #{$property}-right: $b * $value; }
      }
      @else if $a {
        @if $a > 0 { #{$property}-top: $a * $value; #{$property}-right: $a * $value; #{$property}-bottom: $a * $value; #{$property}-left: $a * $value; }
      }
    }
  }

  @else {
    #{$property}: $value;
  }
}

@mixin pad($properties...) {
  @include layout('padding', $properties...);
}

@mixin pad-top($properties) {
  @include layout('padding', $properties, 0, 0, 0);
}

@mixin pad-right($properties) {
  @include layout('padding', 0, $properties, 0, 0);
}

@mixin pad-bottom($properties) {
  @include layout('padding', 0, 0, $properties, 0);
}

@mixin pad-left($properties) {
  @include layout('padding', 0, 0, 0, $properties);
}

@mixin push($properties...) {
  @include layout('margin', $properties...);
}

@mixin push-top($properties) {
  @include layout('margin', $properties, 0, 0, 0);
}

@mixin push-right($properties) {
  @include layout('margin', 0, $properties, 0, 0);
}

@mixin push-bottom($properties) {
  @include layout('margin', 0, 0, $properties, 0);
}

@mixin push-left($properties) {
  @include layout('margin', 0, 0, 0, $properties);
}

.pad {
  @include pad();
}

.pad--verticals {
  @include pad(verticals);
}

.pad--sides {
  @include pad(sides);
}

@each $side in $sides {
  .pad--#{$side} {
    padding-#{$side}: map-get($values, 'padding');
  }
}

.push {
  @include push();
}

.push--verticals {
  @include push(verticals);
}

.push--sides {
  @include push(sides);
}

@each $side in $sides {
  .push--#{$side} {
    margin-#{$side}: map-get($values, 'padding');
  }
}

/*
  Spacing
  Uniform space between sibling elements
*/
@mixin spacing($spacing: false) {
  > * + * {

    @if ($spacing == false) {
      margin-top: 1rem;

    } @else {
      margin-top: $spacing;
    }
  }
}

/*
  Spacing
  Uniform margins and padding
*/
.spacing {
  @include spacing(1rem);
}
